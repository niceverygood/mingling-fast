/**
 * Ï∫êÏã± Ïú†Ìã∏Î¶¨Ìã∞
 * Î©îÎ™®Î¶¨ Ï∫êÏãúÏôÄ localStorageÎ•º ÌôúÏö©Ìïú Îã§Ï∏µ Ï∫êÏã± ÏãúÏä§ÌÖú
 */

// Ï∫êÏãú ÏÑ§Ï†ï
const CACHE_CONFIG = {
  DEFAULT_TTL: 5 * 60 * 1000, // 5Î∂Ñ
  MAX_MEMORY_SIZE: 50, // Î©îÎ™®Î¶¨ Ï∫êÏãú ÏµúÎåÄ Ìï≠Î™© Ïàò
  MAX_STORAGE_SIZE: 100, // localStorage Ï∫êÏãú ÏµúÎåÄ Ìï≠Î™© Ïàò
  STORAGE_PREFIX: 'mingling_cache_'
};

// Î©îÎ™®Î¶¨ Ï∫êÏãú
class MemoryCache {
  constructor(maxSize = CACHE_CONFIG.MAX_MEMORY_SIZE) {
    this.cache = new Map();
    this.maxSize = maxSize;
  }

  set(key, data, ttl = CACHE_CONFIG.DEFAULT_TTL) {
    // ÌÅ¨Í∏∞ Ï†úÌïú ÌôïÏù∏
    if (this.cache.size >= this.maxSize) {
      // LRU Î∞©ÏãùÏúºÎ°ú Í∞ÄÏû• Ïò§ÎûòÎêú Ìï≠Î™© Ï†úÍ±∞
      const firstKey = this.cache.keys().next().value;
      this.cache.delete(firstKey);
    }

    this.cache.set(key, {
      data,
      timestamp: Date.now(),
      ttl
    });
  }

  get(key) {
    const item = this.cache.get(key);
    if (!item) return null;

    // TTL ÌôïÏù∏
    if (Date.now() - item.timestamp > item.ttl) {
      this.cache.delete(key);
      return null;
    }

    // LRU ÏóÖÎç∞Ïù¥Ìä∏Î•º ÏúÑÌï¥ Ïû¨ÏÇΩÏûÖ
    this.cache.delete(key);
    this.cache.set(key, item);

    return item.data;
  }

  delete(key) {
    return this.cache.delete(key);
  }

  clear() {
    this.cache.clear();
  }

  has(key) {
    const item = this.cache.get(key);
    if (!item) return false;

    // TTL ÌôïÏù∏
    if (Date.now() - item.timestamp > item.ttl) {
      this.cache.delete(key);
      return false;
    }

    return true;
  }

  size() {
    return this.cache.size;
  }

  // ÎßåÎ£åÎêú Ìï≠Î™©Îì§ Ï†ïÎ¶¨
  cleanup() {
    const now = Date.now();
    for (const [key, item] of this.cache.entries()) {
      if (now - item.timestamp > item.ttl) {
        this.cache.delete(key);
      }
    }
  }
}

// localStorage Ï∫êÏãú
class StorageCache {
  constructor(maxSize = CACHE_CONFIG.MAX_STORAGE_SIZE) {
    this.maxSize = maxSize;
    this.prefix = CACHE_CONFIG.STORAGE_PREFIX;
  }

  _getKey(key) {
    return `${this.prefix}${key}`;
  }

  _getAllCacheKeys() {
    const keys = [];
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key && key.startsWith(this.prefix)) {
        keys.push(key);
      }
    }
    return keys;
  }

  set(key, data, ttl = CACHE_CONFIG.DEFAULT_TTL) {
    try {
      // ÌÅ¨Í∏∞ Ï†úÌïú ÌôïÏù∏
      const cacheKeys = this._getAllCacheKeys();
      if (cacheKeys.length >= this.maxSize) {
        // Í∞ÄÏû• Ïò§ÎûòÎêú Ìï≠Î™© Ï†úÍ±∞
        let oldestKey = null;
        let oldestTime = Date.now();

        for (const cacheKey of cacheKeys) {
          try {
            const item = JSON.parse(localStorage.getItem(cacheKey));
            if (item && item.timestamp < oldestTime) {
              oldestTime = item.timestamp;
              oldestKey = cacheKey;
            }
          } catch (e) {
            // ÌååÏã± ÏóêÎü¨ Ïãú Ìï¥Îãπ Ìï≠Î™© ÏÇ≠Ï†ú
            localStorage.removeItem(cacheKey);
          }
        }

        if (oldestKey) {
          localStorage.removeItem(oldestKey);
        }
      }

      const item = {
        data,
        timestamp: Date.now(),
        ttl
      };

      localStorage.setItem(this._getKey(key), JSON.stringify(item));
    } catch (error) {
      console.warn('localStorage Ï∫êÏãú Ï†ÄÏû• Ïã§Ìå®:', error);
      // localStorageÍ∞Ä Í∞ÄÎìù Ï∞¨ Í≤ΩÏö∞ ÏùºÎ∂Ä Ìï≠Î™© Ï†ïÎ¶¨
      this.cleanup();
    }
  }

  get(key) {
    try {
      const item = localStorage.getItem(this._getKey(key));
      if (!item) return null;

      const parsed = JSON.parse(item);
      
      // TTL ÌôïÏù∏
      if (Date.now() - parsed.timestamp > parsed.ttl) {
        localStorage.removeItem(this._getKey(key));
        return null;
      }

      return parsed.data;
    } catch (error) {
      console.warn('localStorage Ï∫êÏãú ÏùΩÍ∏∞ Ïã§Ìå®:', error);
      localStorage.removeItem(this._getKey(key));
      return null;
    }
  }

  delete(key) {
    localStorage.removeItem(this._getKey(key));
  }

  clear() {
    const cacheKeys = this._getAllCacheKeys();
    cacheKeys.forEach(key => localStorage.removeItem(key));
  }

  has(key) {
    return this.get(key) !== null;
  }

  // ÎßåÎ£åÎêú Ìï≠Î™©Îì§ Ï†ïÎ¶¨
  cleanup() {
    const now = Date.now();
    const cacheKeys = this._getAllCacheKeys();

    for (const cacheKey of cacheKeys) {
      try {
        const item = JSON.parse(localStorage.getItem(cacheKey));
        if (!item || now - item.timestamp > item.ttl) {
          localStorage.removeItem(cacheKey);
        }
      } catch (e) {
        localStorage.removeItem(cacheKey);
      }
    }
  }
}

// ÌÜµÌï© Ï∫êÏãú ÌÅ¥ÎûòÏä§
class CacheManager {
  constructor() {
    this.memoryCache = new MemoryCache();
    this.storageCache = new StorageCache();
    
    // Ï£ºÍ∏∞Ï†Å Ï†ïÎ¶¨ (5Î∂ÑÎßàÎã§)
    this.cleanupInterval = setInterval(() => {
      this.cleanup();
    }, 5 * 60 * 1000);
  }

  set(key, data, options = {}) {
    const {
      ttl = CACHE_CONFIG.DEFAULT_TTL,
      memoryOnly = false,
      storageOnly = false
    } = options;

    if (!storageOnly) {
      this.memoryCache.set(key, data, ttl);
    }

    if (!memoryOnly) {
      this.storageCache.set(key, data, ttl);
    }
  }

  get(key) {
    // Î©îÎ™®Î¶¨ Ï∫êÏãúÏóêÏÑú Î®ºÏ†Ä ÌôïÏù∏
    let data = this.memoryCache.get(key);
    if (data !== null) {
      return data;
    }

    // localStorage Ï∫êÏãúÏóêÏÑú ÌôïÏù∏
    data = this.storageCache.get(key);
    if (data !== null) {
      // Î©îÎ™®Î¶¨ Ï∫êÏãúÏóêÎèÑ Ï†ÄÏû• (ÏûêÏ£º ÏÇ¨Ïö©ÎêòÎäî Îç∞Ïù¥ÌÑ∞)
      this.memoryCache.set(key, data);
      return data;
    }

    return null;
  }

  delete(key) {
    this.memoryCache.delete(key);
    this.storageCache.delete(key);
  }

  clear() {
    this.memoryCache.clear();
    this.storageCache.clear();
  }

  has(key) {
    return this.memoryCache.has(key) || this.storageCache.has(key);
  }

  cleanup() {
    this.memoryCache.cleanup();
    this.storageCache.cleanup();
  }

  // Ï∫êÏãú ÌÜµÍ≥Ñ
  getStats() {
    return {
      memorySize: this.memoryCache.size(),
      storageSize: this.storageCache._getAllCacheKeys().length,
      maxMemorySize: this.memoryCache.maxSize,
      maxStorageSize: this.storageCache.maxSize
    };
  }

  // ÏÜåÎ©∏Ïûê
  destroy() {
    if (this.cleanupInterval) {
      clearInterval(this.cleanupInterval);
    }
  }
}

// Ïã±Í∏ÄÌÜ§ Ïù∏Ïä§ÌÑ¥Ïä§
const cacheManager = new CacheManager();

// API ÏùëÎãµ Ï∫êÏã±ÏùÑ ÏúÑÌïú Ìó¨Ìçº Ìï®ÏàòÎì§
export const cacheAPI = {
  // API ÏùëÎãµ Ï∫êÏã±
  async cachedFetch(key, fetchFunction, options = {}) {
    const {
      ttl = CACHE_CONFIG.DEFAULT_TTL,
      forceRefresh = false,
      ...cacheOptions
    } = options;

    // Í∞ïÏ†ú ÏÉàÎ°úÍ≥†Ïπ®Ïù¥ ÏïÑÎãå Í≤ΩÏö∞ Ï∫êÏãú ÌôïÏù∏
    if (!forceRefresh) {
      const cached = cacheManager.get(key);
      if (cached !== null) {
        console.log(`üì¶ Ï∫êÏãúÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Î∞òÌôò: ${key}`);
        return cached;
      }
    }

    try {
      console.log(`üîÑ API Ìò∏Ï∂ú Î∞è Ï∫êÏã±: ${key}`);
      const data = await fetchFunction();
      
      // ÏÑ±Í≥µÌïú ÏùëÎãµÎßå Ï∫êÏã±
      if (data) {
        cacheManager.set(key, data, { ttl, ...cacheOptions });
      }
      
      return data;
    } catch (error) {
      // ÏóêÎü¨ Î∞úÏÉù Ïãú Ï∫êÏãúÎêú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏúºÎ©¥ Î∞òÌôò (stale-while-revalidate)
      const staleData = cacheManager.get(key);
      if (staleData !== null) {
        console.warn(`‚ö†Ô∏è API ÏóêÎü¨, Ï∫êÏãúÎêú Îç∞Ïù¥ÌÑ∞ Î∞òÌôò: ${key}`, error);
        return staleData;
      }
      
      throw error;
    }
  },

  // Ï∫êÏãú Î¨¥Ìö®Ìôî
  invalidate(pattern) {
    if (typeof pattern === 'string') {
      cacheManager.delete(pattern);
    } else if (pattern instanceof RegExp) {
      // Ìå®ÌÑ¥ Îß§Ïπ≠ÏúºÎ°ú Ïó¨Îü¨ ÌÇ§ ÏÇ≠Ï†ú
      const memoryKeys = Array.from(cacheManager.memoryCache.cache.keys());
      const storageKeys = cacheManager.storageCache._getAllCacheKeys()
        .map(key => key.replace(cacheManager.storageCache.prefix, ''));
      
      const allKeys = [...new Set([...memoryKeys, ...storageKeys])];
      
      allKeys.forEach(key => {
        if (pattern.test(key)) {
          cacheManager.delete(key);
        }
      });
    }
  },

  // ÌäπÏ†ï ÌÉÄÏûÖÏùò Ï∫êÏãú Î¨¥Ìö®Ìôî
  invalidateByType(type) {
    this.invalidate(new RegExp(`^${type}_`));
  }
};

// ÏûêÏ£º ÏÇ¨Ïö©ÎêòÎäî Ï∫êÏãú ÌÇ§ ÏÉùÏÑ± Ìï®ÏàòÎì§
export const getCacheKey = {
  user: (userId) => `user_${userId}`,
  character: (characterId) => `character_${characterId}`,
  characters: (userId, filters = {}) => {
    const filterStr = Object.keys(filters).length > 0 ? 
      '_' + Object.entries(filters).map(([k, v]) => `${k}:${v}`).join('_') : '';
    return `characters_${userId}${filterStr}`;
  },
  chat: (chatId) => `chat_${chatId}`,
  messages: (chatId, page = 1) => `messages_${chatId}_page_${page}`,
  hearts: (userId) => `hearts_${userId}`,
  favorability: (userId, characterId) => `favorability_${userId}_${characterId}`
};

// ÌéòÏù¥ÏßÄ Ïñ∏Î°úÎìú Ïãú Ï†ïÎ¶¨
if (typeof window !== 'undefined') {
  window.addEventListener('beforeunload', () => {
    cacheManager.destroy();
  });
}

export { cacheManager };
export default cacheAPI; 