generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  avatarUrl   String?
  hearts      Int      @default(150)
  joinedAt    DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  characters  Character[]
  personas    Persona[]   // 사용자가 만든 페르소나들
  chats       Chat[]
  messages    Message[]
  heartTransactions HeartTransaction[]
  relations   Relation[]  // 호감도 관계

  @@map("users")
}

model Character {
  id              String   @id @default(cuid())
  name            String
  age             String?  // 나이 (문자열로 변경)
  description     String?  @db.Text
  avatarUrl       String?
  personality     String?  @db.Text
  isPublic        Boolean  @default(true)
  
  // 새로운 캐릭터 생성 필드들
  characterType   String?  // 애니메이션&만화, 개인캐릭터, 순수창작 등
  background      String?  @db.Text // 배경 설정
  mbti            String?  // MBTI 유형
  height          String?  // 키
  likes           String?  @db.Text // 좋아하는 것들
  dislikes        String?  @db.Text // 싫어하는 것들
  hashtags        Json?    // 해시태그들 (JSON 배열)
  gender          String?  // 성별: male, female, undisclosed
  firstImpression String?  @db.Text // 캐릭터 첫인상 설정
  basicSetting    String?  @db.Text // 캐릭터 기본 설정
  
  // 새로 추가된 필드들
  weapons         Json?    // 무기 정보 배열
  isCommercial    Boolean  @default(false) // 상업 전용 캐릭터
  
  // 설정 옵션들
  allowViolence   Boolean  @default(false) // 심한 폭력 캐릭터 허용
  backupChats     Boolean  @default(true) // 대화 내용 백업
  hashtagCode     String?  // 해시태그 코드
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  userId          String   // creatorId에서 userId로 변경
  user            User     @relation(fields: [userId], references: [id])
  chats           Chat[]
  relations       Relation[] // 호감도 관계

  @@map("characters")
}

model Chat {
  id          String   @id @default(cuid())
  lastMessage String?
  lastMessageAt DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  characterId String
  character   Character @relation(fields: [characterId], references: [id])
  personaId   String?   // 선택된 페르소나 ID (선택사항)
  persona     Persona?  @relation(fields: [personaId], references: [id])
  messages    Message[]

  @@unique([userId, characterId])
  @@map("chats")
}

model Message {
  id          String   @id @default(cuid())
  content     String   @db.Text
  isFromUser  Boolean  @default(true)
  createdAt   DateTime @default(now())

  // Relations
  chatId      String
  chat        Chat     @relation(fields: [chatId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@map("messages")
}

model Persona {
  id          String   @id @default(cuid())
  name        String
  age         String?
  gender      String?  // 'male', 'female', 'undisclosed'
  job         String?  // 직업
  avatarUrl   String?
  basicInfo   String?  @db.Text // 기본 정보 (성격, 취미 등)
  habits      String?  @db.Text // 습관적인 말과 행동
  appearance  String?  @db.Text // 외모
  personality String?  @db.Text // 성격
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  chats       Chat[]   // 이 페르소나로 진행한 채팅들

  @@map("personas")
}

model HeartTransaction {
  id          String   @id @default(cuid())
  amount      Int      // positive for charge, negative for spend
  type        String   // 'charge', 'spend', 'gift', 'purchase'
  description String?
  balance     Int?     // 트랜잭션 후 잔액
  
  // 웹 결제 관련 필드들 (포트원)
  impUid      String?  @unique // 포트원 결제 고유 ID
  merchantUid String?  // 주문번호
  status      String   @default("pending") // 'pending', 'verified', 'completed', 'failed', 'refunded'
  paymentMethod String? // 결제 수단
  heartAmount Int?     // 구매한 하트 수량
  paidAt      DateTime? // 결제 완료 시간
  completedAt DateTime? // 하트 지급 완료 시간
  refundedAt  DateTime? // 환불 처리 시간
  
  // 인앱결제 관련 필드들
  transactionId String? // 인앱결제 트랜잭션 ID
  productId     String? // 인앱결제 상품 ID
  purchaseDate  DateTime? // 인앱결제 구매 시간
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@map("heart_transactions")
}

// 호감도 시스템
model Relation {
  id          String   @id @default(cuid())
  score       Int      @default(0) // 0-1000 호감도 점수
  stage       Int      @default(0) // 0-6 단계 (S0-S6)
  mood        String   @default("neutral") // 현재 감정 상태
  lastDecayAt DateTime @default(now()) // 마지막 감쇠 적용 시간
  lastEventAt DateTime @default(now()) // 마지막 이벤트 발생 시간
  totalMessages Int    @default(0) // 총 메시지 수
  specialEvents Int    @default(0) // 특별 이벤트 수
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  characterId String
  character   Character @relation(fields: [characterId], references: [id])
  eventLogs   RelationEventLog[]
  memories    RelationMemory[]
  achievements RelationAchievement[]

  @@unique([userId, characterId])
  @@map("relations")
}

model RelationEventLog {
  id          String   @id @default(cuid())
  eventType   String   // 'chat_positive', 'chat_negative', 'gift', 'date', 'conflict' 등
  deltaScore  Int      // 점수 변화량 (+/-)
  description String?  @db.Text // 이벤트 설명
  messageId   String?  // 관련 메시지 ID (채팅 이벤트의 경우)
  metadata    String?  @db.Text // 추가 메타데이터 (JSON 형태)
  createdAt   DateTime @default(now())

  // Relations
  relationId  String
  relation    Relation @relation(fields: [relationId], references: [id])

  @@map("relation_event_logs")
}

// 관계 추억 시스템
model RelationMemory {
  id          String   @id @default(cuid())
  title       String   // 추억 제목
  description String   @db.Text // 추억 설명
  memoryType  String   // 'first_meet', 'special_chat', 'milestone', 'confession', 'date' 등
  importance  Int      @default(1) // 중요도 (1-5)
  isHighlight Boolean  @default(false) // 특별한 추억인지
  messageId   String?  // 관련 메시지 ID
  metadata    String?  @db.Text // 추가 메타데이터 (JSON 형태)
  createdAt   DateTime @default(now())

  // Relations
  relationId  String
  relation    Relation @relation(fields: [relationId], references: [id])

  @@map("relation_memories")
}

// 관계 성취 시스템
model RelationAchievement {
  id            String   @id @default(cuid())
  achievementId String   // 성취 ID ('first_meet', 'friend_level', 'lover_level' 등)
  title         String   // 성취 제목
  description   String   // 성취 설명
  icon          String   // 성취 아이콘 (이모지)
  category      String   // 성취 카테고리 ('milestone', 'activity', 'special')
  unlockedAt    DateTime @default(now()) // 달성 시간
  
  // Relations
  relationId    String
  relation      Relation @relation(fields: [relationId], references: [id])

  @@unique([relationId, achievementId])
  @@map("relation_achievements")
} 